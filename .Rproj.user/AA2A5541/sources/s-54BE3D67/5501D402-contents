---
title: "PROCESS DATA AND MODEL"
author: "Nage Ngo"
date: "12/10/2020"
output: html_document
---

# IMPORT AND DATA SUMMARY

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(rmgarch) 
library(ggplot2)
library(zoo)
```
```{r import balance, include=F, message=F, error=F}
# startdate = as.Date("2010-01-01")
# enddate = as.Date("2020-12-09")

startdate = as.Date("2010-01-01")
enddate =  as.Date(Sys.Date())

quantmod::getSymbols("^IXIC", from = startdate, to = enddate)
str(IXIC)
nd <- data.frame(nasd=IXIC$IXIC.Adjusted, date=time(IXIC))

quantmod::getSymbols("BTC-USD", src= "yahoo", from = startdate, to = enddate)
str(`BTC-USD`)
btc <- data.frame(btc=`BTC-USD`$`BTC-USD.Adjusted`, date=time(`BTC-USD`)) 

quantmod::getSymbols("AAPL",src="yahoo", from = startdate, to = enddate)
str(`AAPL`)
app <- data.frame(btc=`AAPL`$`AAPL.Adjusted`, date=time(`AAPL`)) 

all <- btc %>% full_join(nd, by = "date") %>% full_join(app,by = "date") %>% 
  select(date, btc=`BTC.USD.Adjusted`, nas= `IXIC.Adjusted`, app = `AAPL.Adjusted`) %>%
  mutate(lbtc = log(btc) - dplyr::lag(log(btc)),
         lnas = log(nas) - dplyr::lag(log(nas)),
         lapp = log(app) - dplyr::lag(log(app))) %>% na.omit() 

write.csv(all, file = "data/processed.csv")
```
```{r sum stat, echo=F, message=F, error=F}
p1 <- ggplot(data = all, aes(x=date, y=nas)) + theme_classic() +
  geom_line() + labs(title = "NASDAQ Price", y = NULL, x = NULL) + 
  scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
                   minor_breaks = NULL) +
  theme(text=element_text(family="Palatino", size = 9),
        panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))

p2 <- ggplot(data = all, aes(x=date, y=app)) + theme_classic() +
  geom_line() + labs(title = "Apple Price ($)", y = NULL, x = NULL) + 
  scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
                   minor_breaks = NULL) +
  theme(text=element_text(family="Palatino", size = 9),
        panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))

p3 <- ggplot(data = all, aes(x=date, y=btc)) + theme_classic() +
  geom_line() + labs(title = "Bitcoin Price ($)", y = NULL, x = NULL) + 
  scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
                   minor_breaks = NULL) +
  theme(text=element_text(family="Palatino", size = 9),
        panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))

p4 <- ggplot(data = all, aes(x=date, y=lnas)) + theme_classic() +
  geom_line() + labs(title = "Log Difference NASDAQ Price", y = NULL,x = NULL) + 
  scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
                   minor_breaks = NULL) +
  theme(text=element_text(family="Palatino", size = 9),
        panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))

p5 <- ggplot(data = all, aes(x=date, y=lapp)) + theme_classic() +
  geom_line() + labs(title = "Log Difference Apple Price ($)", y = NULL, x = NULL) + 
  scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
                   minor_breaks = NULL) +
  theme(text=element_text(family="Palatino", size = 9),
        panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))

p6 <- ggplot(data = all, aes(x=date, y=lbtc)) + theme_classic() +
  geom_line() + labs(title = "Log Difference Bitcoin Price ($)", y = NULL, x = NULL) + 
  scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
                   minor_breaks = NULL) +
  theme(text=element_text(family="Palatino", size = 9),
        panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))

sumstat <- gridExtra::grid.arrange(p1, p2, p3, p4, p5, p6, nrow=2, ncol=3)

ggsave("final-fig/plot-sum.png", sumstat, height = 5.2, width = 9.6, dpi = 600)
```


### Test for stationarity and presence of unit roots. 

```{r test stationarity, message=F, error=F}

n<-ts(all$lnas)
b<-ts(all$lbtc)
a<-ts(all$lapp)

library(fUnitRoots)

my_urkpssTest <- function (x, type, lags, use.lag, doplot) {  # to fix KPSS because test returns NA
    x <- as.vector(x)   # source: https://stackoverflow.com/questions/59936691/kpss-test-returns-na
    urca <- urca::ur.kpss(x, type = type[1], lags = lags[1], use.lag = use.lag)
    output = capture.output(urca::summary(urca))[-(1:4)]
    output = output[-length(output)]
    for (i in 1:length(output)) output[i] = paste(" ", output[i])
    ans = list(name = "ur.kpss", test = urca, output = output)
    if (doplot) 
        plot(urca)
    new("fHTEST", call = match.call(), data = list(x = x), 
        test = ans, title = str_c("KPSS Unit Root Test") #, description = description()
        )
}

my_urkpssTest(n, type = c("tau"), lags = c("short"), use.lag = NULL, doplot = TRUE)
my_urkpssTest(b, type = c("tau"), lags = c("short"), use.lag = NULL, doplot = TRUE)
my_urkpssTest(a, type = c("tau"), lags = c("short"), use.lag = NULL, doplot = TRUE)
```

### Test for autoregressive conditional heteroscedasticity (ARCH) 

```{r}
FinTS::ArchTest(all$lnas, lags=12, demean = FALSE)
FinTS::ArchTest(all$lapp, lags=12, demean = FALSE)
FinTS::ArchTest(all$lbtc, lags=12, demean = FALSE)
```

p-value smaller than 0.002 for all series $\to$ reject null $\to$ there is ARCH in the model.

### Determine best ARMA model

The auto.arima() function in R uses a variation of the Hyndman-Khandakar algorithm (Hyndman & Khandakar, 2008), which combines unit root tests, minimisation of the AICc and MLE to obtain an ARIMA model. Based on the returns of this function and the acf and pacf graphs, we pick ARMA order of (2,0).

```{r arima order}
forecast::auto.arima(all$lbtc) # ARIMA(2,0,1) 
forecast::auto.arima(all$lnas) # ARIMA(2,0,0) 
forecast::auto.arima(all$lapp) # ARIMA(2,0,0)
```


# GARCH

### Specify and fit univariate GARCH for all series

```{r unifit}
rX <- ts(all[,c(5,6,7)])
# 
# uspec.n <- multispec(replicate(3, ugarchspec(mean.model = list(armaOrder = c(2,0)),
#                                             variance.model = list(garchOrder = c(1,1))))) #MA = 1 ?
# # ARMA(1,1)GARCH(1,1)
# 
# # estimate univariate GARCH models for the series using the multifit command. 
# multf <- multifit(uspec.n, rX)
# multf

```

A test of non-constant correlation based on Engle and Sheppard (2001) can be used to determine whether conditional correlations are constant. If constant, we can use the Constant Conditional Correlation specification instead. Based on existing literature, we assume non-constant correlation.

```{r all 3 dcc, echo=F}

# spec_dcc = dccspec(uspec = uspec.n, dccOrder = c(1, 1), distribution = 'mvnorm') # multivariate normal
# 
# fit_dcc <- dccfit(spec_dcc, data = rX, fit.control = list(eval.se=T), fit = multf) # if leave out fit --> 1 step model, fit everything at once, both univariate and correlation
# 
# fit_dcc
```

```{r cor cov, echo=F}
# # conditional correlations ----
# cor1 <- rcor(fit_dcc)
# 
# # dim(cor1) #dimension, 1226 days each with a 3 by 3 matrix
# # cor1[,,dim(cor1)[3]] # last day
# 
# cor_btc_nas <- cor1[1,2,] # 1 row/col bitc and 2 row/col nas; 1st row 1 col,  
# cor_btc_app <- cor1[1,3,]
# cor_app_nas <- cor1[3,2,]
# 
# # conditional covariance -----
# cov1 <- rcov(fit_dcc)
# 
# # dim(cov1)
# # cov1[,,dim(cov1)[3]]
# 
# cov_btc_nas <- cov1[1,2,] # 1 row/col bitc and 2 row/col nas; 1st row 1 col,  
# cov_btc_app <- cov1[1,3,]
# cov_app_nas <- cov1[3,2,]
```

```{r plot cor and cov, include=F}
# c1 <- ggplot(data = all, aes(x=date, y=cor_btc_nas)) + theme_classic() +
#   geom_line() + labs(title = "COR: BITCOIN-NASDAQ", x = NULL, y = NULL) + 
#   scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
#                    minor_breaks = NULL) +
#   theme(text=element_text(family="Palatino", size = 9),
#         panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))
# 
# c2 <- ggplot(data = all, aes(x=date, y=cor_btc_app)) + theme_classic() +
#   geom_line() + labs(title = "COR: BITCOIN-Apple", x = NULL, y = NULL) + 
#   scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
#                    minor_breaks = NULL) +
#   theme(text=element_text(family="Palatino", size = 9),
#         panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))
# 
# c3 <- ggplot(data = all, aes(x=date, y=cor_app_nas)) + theme_classic() +
#   geom_line() + labs(title = "COR: NASDAQ-Apple", x = NULL, y = NULL) + 
#   scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
#                    minor_breaks = NULL) +
#   theme(text=element_text(family="Palatino", size = 9),
#         panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))
# 
# c4 <- ggplot(data = all, aes(x=date, y=cov_btc_nas)) + theme_classic() +
#   geom_line() + labs(title = "COV: BITCOIN-NASDAQ", x = NULL, y = NULL) + 
#   scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
#                    minor_breaks = NULL) +
#   theme(text=element_text(family="Palatino", size = 9),
#         panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))
# 
# c5 <- ggplot(data = all, aes(x=date, y=cov_btc_app)) + theme_classic() +
#   geom_line() + labs(title = "COV: BITCOIN-Apple", x = NULL, y = NULL) + 
#   scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
#                    minor_breaks = NULL) +
#   theme(text=element_text(family="Palatino", size = 9),
#         panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))
# 
# c6 <- ggplot(data = all, aes(x=date, y=cov_app_nas)) + theme_classic() +
#   geom_line() + labs(title = "COV: NASDAQ-Apple", x = NULL, y = NULL) + 
#   scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
#                    minor_breaks = NULL) +
#   theme(text=element_text(family="Palatino", size = 9),
#         panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))
# 
# corcov<-gridExtra::grid.arrange(p4, p5, p6, c1, c2, c3, c4, c5, c6, nrow=3, ncol=3)
# 
# ggsave("final-fig/corcov.png", corcov, height = 5.2, width = 9.6, dpi = 600)
```


# DCC GARCH on each pair of assets

### Bitcoin and Nasdaq: COR and COV

Here, we assess and plot the Conditional Correlation using the DCC approach for Bitcoin and Nasdaq univariate GARCH estimates.

```{r NB 2nd step}
nas_bit <- rX[,c(1,2)] # 2 series only
uspec.2 <- multispec(replicate(2, ugarchspec(mean.model = list(armaOrder = c(2,0)),
                                            variance.model = list(garchOrder = c(1,1))))) #MA
mult_NB <- multifit(uspec.2, nas_bit)
spec_dcc_NB <- dccspec(uspec = uspec.2, dccOrder = c(1, 1), distribution = 'mvnorm') 

fit_dcc_NB <- dccfit(spec_dcc_NB, data = nas_bit, fit.control = list(eval.se=T), fit = mult_NB)

fit_dcc_NB
```
```{r plot NB COV COR}
# conditional correlations ----
cor_NB <- rcor(fit_dcc_NB)
# dim(cor_NB) #dimension, 1226 days each with a 2 by 2 matrix
# cor_NB[,,dim(cor_NB)[3]] # last day
cor_btc_nas <- cor_NB[1,2,] # 1 row/col bitc and 2 row/col nas; 1st row 1 col,  

# conditional covariance -----
cov_NB <- rcov(fit_dcc_NB)
cov_NB[,,dim(cov_NB)[3]]
cov_btc_nas <- cov_NB[1,2,]
cov_NB_nas <- cov_NB[2,2,dim(cov_NB)[3]]

var_NB_nas <- cov_NB[2,2,]  
var_NB_btc <- cov_NB[1,1,]  

# plot----
nb1 <- ggplot(data = all, aes(x=date, y=var_NB_nas)) + theme_classic() +
  geom_line() + labs(title = "VAR: NASDAQ", x = NULL, y = NULL) + 
  scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
                   minor_breaks = NULL) +
  theme(text=element_text(family="Palatino", size = 9),
        panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))

nb2 <- ggplot(data = all, aes(x=date, y=var_NB_btc)) + theme_classic() +
  geom_line() + labs(title = "VAR: BITCOIN", x = NULL, y = NULL) + 
  scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
                   minor_breaks = NULL) +
  theme(text=element_text(family="Palatino", size = 9),
        panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))

nb3 <- ggplot(data = all, aes(x=date, y=cov_btc_nas)) + theme_classic() +
  geom_line() + labs(title = "COV: BITCOIN-NASDAQ", x = NULL, y = NULL) + 
  scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
                   minor_breaks = NULL) +
  theme(text=element_text(family="Palatino", size = 9),
        panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))

nb4 <- ggplot(data = all, aes(x=date, y=cor_btc_nas)) + theme_classic() +
  geom_line() + labs(title = "COR: BITCOIN-NASDAQ", x = NULL, y = NULL) + 
  scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
                   minor_breaks = NULL) +
  theme(text=element_text(family="Palatino", size = 9),
        panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))

corcov_NB <- gridExtra::grid.arrange(p4, p6, nb1, nb2, nb3, nb4, ncol = 2, nrow = 3)

ggsave("final-fig/corcov_NB.png", corcov_NB, height = 6, width = 9.6, dpi = 600)
```

### Apple and Nasdaq: COR and COV

Assess and plot the Conditional Correlation using the DCC approach for Apple and Nasdaq univariate GARCH estimates.

```{r NA 2nd step, echo=F}
nas_app <- rX[,c(2,3)]

mult_NA <- multifit(uspec.2, nas_app)

spec_dcc_NA <- dccspec(uspec = uspec.2, dccOrder = c(1, 1), distribution = 'mvnorm') 

fit_dcc_NA <- dccfit(spec_dcc_NA, data = nas_app, fit.control = list(eval.se=T), fit = mult_NA)

fit_dcc_NA
```
```{r plot NA COV COR, echo=F}
# conditional correlations ----
cor_NA <- rcor(fit_dcc_NA)
# cor_NA[,,dim(cor_NA)[3]] # last day
cor_app_nas <- cor_NA[1,2,] # 1 row/col bitc and 2 row/col nas; 1st row 1 col,  

# conditional covariance -----
cov_NA <- rcov(fit_dcc_NA)
# cov_NA[,,dim(cov_NA)[3]]
cov_app_nas <- cov_NA[1,2,]


var_NA_app <- cov_NA[2,2,]  
var_NA_nas <- cov_NA[1,1,]  

# plot----
na1 <- ggplot(data = all, aes(x=date, y=var_NA_nas)) + theme_classic() +
  geom_line() + labs(title = "VAR: NASDAQ", x = NULL, y = NULL) + 
  scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
                   minor_breaks = NULL) +
  theme(text=element_text(family="Palatino", size = 9),
        panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))

na2 <- ggplot(data = all, aes(x=date, y=var_NA_app)) + theme_classic() +
  geom_line() + labs(title = "VAR: Apple", x = NULL, y = NULL) + 
  scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
                   minor_breaks = NULL) +
  theme(text=element_text(family="Palatino", size = 9),
        panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))

na3 <- ggplot(data = all, aes(x=date, y=cov_app_nas)) + theme_classic() +
  geom_line() + labs(title = "COV: Apple-NASDAQ", x = NULL, y = NULL) + 
  scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
                   minor_breaks = NULL) +
  theme(text=element_text(family="Palatino", size = 9),
        panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))

na4 <- ggplot(data = all, aes(x=date, y=cor_app_nas)) + theme_classic() +
  geom_line() + labs(title = "COR: Apple-NASDAQ", x = NULL, y = NULL) + 
  scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
                   minor_breaks = NULL) +
  theme(text=element_text(family="Palatino", size = 9),
        panel.grid.major.y = element_line(colour = "lightblue", linetype = "dashed"))

corcov_NA <- gridExtra::grid.arrange(p4, p6, na1, na2, na3, na4, ncol = 2, nrow = 3)

ggsave("final-fig/corcov_NA.png", corcov_NA, height = 6, width = 10, dpi = 600)
```


# Minimize Risk/Variance of Portfolio

### Optimal Weight

```{r NA w}
w_NA <- (var_NA_nas-cov_app_nas) / (var_NA_app + var_NA_nas - 2*cov_app_nas)
# weightage = formula...

w_NA <- data.frame(w_NA) %>%
  mutate(av = rollmean(w_NA, 10, fill = NA, align = "right"),
         av_30 =rollmean(w_NA, 30, fill = NA, align = "right"),
         av_253 =rollmean(w_NA, 253, fill = NA, align = "right"))%>%
  # filter(!is.na(av)) %>%filter(!is.na(av_30)) %>% 
  mutate(date = all$date)

apple_w <-ggplot(data = w_NA, aes(x = date,y = w_NA)) + 
  geom_line(aes(color="pink")) +
  geom_line(aes(y=av,color="purple"), na.rm = T) + 
  geom_line(aes(y=av_30,color="darkgreen"), na.rm = T) +
  geom_line(aes(y=av_253,color="red"), na.rm = T, size=1.5) +
  geom_line(aes(y=-0.07132022, color="black"), size = 0.5, linetype="solid")+
  theme_classic()+
  theme(text=element_text(family="Palatino", size = 9),
        panel.grid.major.y = element_line(colour = "lightblue", 
                                          linetype = "dotted")) +
  labs(x="time",y="Optimal Weightage of Apple") +
  scale_y_continuous(breaks = c(0, -0.071,seq(-0.4, 0.8, by = 0.3))) +
  scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
                   minor_breaks = NULL)+
  scale_color_identity(name = "Weight (%)",
                       breaks = c("pink", "purple", "darkgreen","red", "black"),
                       labels = c("Daily", "10-day Rolling Average",
                                 "30-day Rolling Average",
                                 "253-day Rolling Average", "All time Average"),
                       guide = "legend")
apple_w

ggsave("final-fig/apple_w.png", apple_w, height = 6, width = 9.6, dpi = 600)
```
```{r NB w}
w_NB <- (var_NB_nas-cov_btc_nas) / (var_NB_btc + var_NB_nas - 2*cov_btc_nas)

w_NB <- data.frame(w_NB) %>%
  mutate(av = rollmean(w_NB, 10, fill = NA, align = "right"),
         av_30 =rollmean(w_NB, 30, fill = NA, align = "right"),
         av_253 =rollmean(w_NB, 253, fill = NA, align = "right"),
         m = mean(w_NB))%>%
  # filter(!is.na(av)) %>%filter(!is.na(av_30)) %>% 
  mutate(date = all$date)

btc_w <-ggplot(data = w_NB, aes(x = date,y = w_NB)) + 
  geom_line(aes(color="pink")) +
  geom_line(aes(y=av,color="purple"), na.rm = T) + 
  geom_line(aes(y=av_30,color="darkgreen"), na.rm = T) +
  geom_line(aes(y=av_253,color="red"), na.rm = T, size=1.5) +
  geom_line(aes(y=0.05907716, color="black"), size = 0.5, linetype="solid")+
  theme_classic()+
  theme(text=element_text(family="Palatino", size = 9),
        panel.grid.major.y = element_line(colour = "lightblue", 
                                          linetype = "dotted")) +
  labs(x="time",y="Optimal Weightage of Bitcoin") +
  scale_y_continuous(breaks = c(0.059,seq(-0.1, 0.5, by = 0.1))) +
  scale_x_date(date_breaks = "12 months", date_labels = " %b \n %Y", 
                   minor_breaks = NULL)+
  scale_color_identity(name = "Bitcoin Weight (%)",
                       breaks = c("pink", "purple", "darkgreen","red"),
                       labels = c("Daily", "10-day Rolling Average",
                                 "30-day Rolling Average",
                                 "253-day Rolling Average"),
                       guide = "legend")
btc_w


ggsave("final-fig/btc_w.png", btc_w, height = 6, width = 9.6, dpi = 600)
```
```{r both assets in port w nasdaq}
weight <- ggpubr::ggarrange(apple_w, btc_w, ncol=2, common.legend = TRUE, legend="bottom") 
  # gridExtra::grid.arrange(apple_w, btc_w, ncol=2)

ggsave("final-fig/b_a_w.png", weight, height = 4.5, width = 10, dpi = 600)
```

