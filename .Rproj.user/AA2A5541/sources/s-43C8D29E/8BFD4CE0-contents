---
title: "DC 3"
author: "Nage Ngo, Carol Milton, Esa Schenck"
date: "3/19/2021"
output:   
  html_document:
    toc: true
    toc_depth: 3
    theme: cosmo
    highlight: tango
    toc_float: true
    code_folding: hide
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = F)
library(tidyverse)
library(readr)
library(magick)
library(plotly)
```

**Import**

```{r}
Lekagul_Sensor_Data <- read_csv("Lekagul Sensor Data.csv", 
    col_types = cols(Timestamp = col_datetime(format = "%m/%d/%y %h:%M\t")))
Meteorological_Data <- read_csv("Meteorological Data.csv", 
    col_types = cols(Date = col_datetime(format = "%m/%d/%y %h:%M\t"), 
        X4 = col_skip()))
Sensor_Data <- read_csv("Sensor Data.csv", 
    col_types = cols(`Date Time` = col_datetime(format = "%m/%d/%y %h:%M\t")))
```

# Lekagul Sensor

171,477 entries -->  1,043 car ids that does not enter and leave immediately ?

```{r}
traffic_data <- Lekagul_Sensor_Data %>%
  mutate(in_out_n = ifelse(str_detect(`gate-name`,"entrance"),1,0)) %>%
  group_by(`car-id`) %>%
  mutate(in_out_check = sum(in_out_n)) %>% distinct(`car-id`, .keep_all = T) %>%
  filter(in_out_check!=2) %>%
  arrange(desc(in_out_check))
```


# Meteorological Data

```{r}

Meteorological_Data <- Meteorological_Data %>%
  mutate(month = substr(as.character(`Date`), 6, 7))
Meteorological_april <- Meteorological_Data%>%
  filter(month == '04') %>% 
  select(-`Elevation (m)`) %>% na.omit()
Meteorological_aug <- Meteorological_Data%>%
  filter(month == '08')%>% 
  select(-`Elevation (m)`) %>% na.omit()
Meteorological_dec <- Meteorological_Data%>%
  filter(month == '12')%>% 
  select(-`Elevation (m)`) %>% na.omit()
```

### Wind direction

```{r}
m1<- ggplot(data = Meteorological_april, aes(x=Date,  y = `Wind Direction`)) +
  geom_line() + labs(x=NULL, y=NULL) + theme_classic() +
  scale_x_datetime(expand = c(0, 0),             # remove space within each panel
                   breaks = "5 days", date_labels = "%b %d")
m2 <- ggplot(data = Meteorological_aug, aes(x=Date,  y = `Wind Direction`)) +
  geom_line() + labs(x=NULL, y=NULL) + theme_classic() +
  scale_x_datetime(expand = c(0, 0),
                   breaks = "5 days", date_labels = "%b %d")
m3 <- ggplot(data = Meteorological_dec, aes(x=Date,  y = `Wind Direction`)) +
  geom_line() + labs(x=NULL, y=NULL) + theme_classic()+
  scale_x_datetime(expand = c(0, 0),             
                   breaks = "5 days", date_labels = "%b %d")

ggpubr::ggarrange(m1, m2, m3, nrow = 3, common.legend = TRUE, legend="bottom")
```


### Wind Speed

```{r}
m4<- ggplot(data = Meteorological_april, aes(x=Date,  y = `Wind Speed (m/s)`)) +
  geom_line() + labs(x=NULL, y=NULL) + theme_classic() +
  scale_x_datetime(expand = c(0, 0),             # remove space within each panel
                   breaks = "5 days", date_labels = "%b %d")
m5 <- ggplot(data = Meteorological_aug, aes(x=Date,  y = `Wind Speed (m/s)`)) +
  geom_line() + labs(x=NULL, y=NULL) + theme_classic() +
  scale_x_datetime(expand = c(0, 0),
                   breaks = "5 days", date_labels = "%b %d")
m6 <- ggplot(data = Meteorological_dec, aes(x=Date,  y = `Wind Speed (m/s)`)) +
  geom_line() + labs(x=NULL, y=NULL) + theme_classic()+
  scale_x_datetime(expand = c(0, 0),             
                   breaks = "5 days", date_labels = "%b %d")
ggpubr::ggarrange(m4, m5, m6, nrow = 3, common.legend = TRUE, legend="bottom")

```



# Sensor Data

```{r}
Sensor_Data <- Sensor_Data %>%
  mutate(month = substr(as.character(`Date Time`), 6, 7))
sensor_april <- Sensor_Data%>%
  filter(month == '04')
sensor_aug <- Sensor_Data%>%
  filter(month == '08')
sensor_dec <- Sensor_Data%>%
  filter(month == '12')

c1<- ggplot(data = sensor_april, aes(x=`Date Time`, y = Reading, color = Chemical)) +
  geom_line() + labs(x=NULL, y=NULL) + theme_classic() +
  scale_x_datetime(expand = c(0, 0),             # remove space within each panel
                   breaks = "5 days", date_labels = "%b %d")
c2 <- ggplot(data = sensor_aug, aes(x=`Date Time`, y = Reading, color = Chemical)) +
  geom_line() + labs(x=NULL, y=NULL) + theme_classic() +
  scale_x_datetime(expand = c(0, 0),
                   breaks = "5 days", date_labels = "%b %d") +
  scale_y_continuous(limits = c(0,100))
c3 <- ggplot(data = sensor_dec, aes(x=`Date Time`, y = Reading, color = Chemical)) +
  geom_line() + labs(x=NULL, y=NULL) + theme_classic()+
  scale_x_datetime(expand = c(0, 0),             
                   breaks = "5 days", date_labels = "%b %d")
ggpubr::ggarrange(c1, c2, c3, nrow = 3, common.legend = TRUE, legend="bottom")
```




# Map 

```{r}
# map_i <- image_read(path = "Lekagul Roadways.bmp")
# 
# map <- image_ggplot(map_i)  #+ coord_fixed()
# map
# plot_ly(map) 
```

```{r}
# WindRose.R 
### Source: https://stackoverflow.com/questions/17266780/wind-rose-with-ggplot-r
require(ggplot2)
require(RColorBrewer)

plot.windrose <- function(data,
                      spd,
                      dir,
                      spdres = 2,
                      dirres = 30,
                      spdmin = 2,
                      spdmax = 7,
                      spdseq = NULL,
                      palette = "Dark2",
                      countmax = NA,
                      debug = 0){


# Look to see what data was passed in to the function
  if (is.numeric(spd) & is.numeric(dir)){
    # assume that we've been given vectors of the speed and direction vectors
    data <- data.frame(spd = spd,
                       dir = dir)
    spd = "spd"
    dir = "dir"
  } else if (exists("data")){
  }  

  # Tidy up input data ----
  n.in <- NROW(data)
  dnu <- (is.na(data[[spd]]) | is.na(data[[dir]]))
  data[[spd]][dnu] <- NA
  data[[dir]][dnu] <- NA

  # figure out the wind speed bins ----
  if (missing(spdseq)){
    spdseq <- seq(spdmin,spdmax,spdres)
  } else {
    if (debug >0){
      cat("Using custom speed bins \n")
    }
  }
  # get some information about the number of bins, etc.
  n.spd.seq <- length(spdseq)
  n.colors.in.range <- n.spd.seq - 1

  # create the color map
  spd.colors <- colorRampPalette(brewer.pal(min(max(3,
                                                    n.colors.in.range),
                                                min(9,
                                                    n.colors.in.range)),                                               
                                            palette))(n.colors.in.range)

  if (max(data[[spd]],na.rm = TRUE) > spdmax){    
    spd.breaks <- c(spdseq,
                    max(data[[spd]],na.rm = TRUE))
    spd.labels <- c(paste(c(spdseq[1:n.spd.seq-1]),
                          '-',
                          c(spdseq[2:n.spd.seq])),
                    paste(spdmax,
                          "-",
                          max(data[[spd]],na.rm = TRUE)))
    spd.colors <- c(spd.colors, "grey50")
  } else{
    spd.breaks <- spdseq
    spd.labels <- paste(c(spdseq[1:n.spd.seq-1]),
                        '-',
                        c(spdseq[2:n.spd.seq]))    
  }
  data$spd.binned <- cut(x = data[[spd]],
                         breaks = spd.breaks,
                         labels = spd.labels,
                         ordered_result = TRUE)
  # clean up the data
  data. <- na.omit(data)

  # figure out the wind direction bins
  dir.breaks <- c(-dirres/2,
                  seq(dirres/2, 360-dirres/2, by = dirres),
                  360+dirres/2)  
  dir.labels <- c(paste(360-dirres/2,"-",dirres/2),
                  paste(seq(dirres/2, 360-3*dirres/2, by = dirres),
                        "-",
                        seq(3*dirres/2, 360-dirres/2, by = dirres)),
                  paste(360-dirres/2,"-",dirres/2))
  # assign each wind direction to a bin
  dir.binned <- cut(data[[dir]],
                    breaks = dir.breaks,
                    ordered_result = TRUE)
  levels(dir.binned) <- dir.labels
  data$dir.binned <- dir.binned

  # Run debug if required ----
  if (debug>0){    
    cat(dir.breaks,"\n")
    cat(dir.labels,"\n")
    cat(levels(dir.binned),"\n")       
  }  

  # deal with change in ordering introduced somewhere around version 2.2
  if(packageVersion("ggplot2") > "2.2"){    
    # cat("Hadley broke my code\n")
    data$spd.binned = with(data, factor(spd.binned, levels = rev(levels(spd.binned))))
    spd.colors = rev(spd.colors)
  }

  # create the plot ----
  p.windrose <- ggplot(data = data,
                       aes(x = dir.binned,
                           fill = spd.binned)) +
    geom_bar() + 
    scale_x_discrete(drop = FALSE,
                     labels = waiver()) +
    coord_polar(start = -((dirres/2)/360) * 2*pi) +
    scale_fill_manual(name = "Wind Speed (m/s)", 
                      values = spd.colors,
                      drop = FALSE) +
    theme(axis.title.x = element_blank())

  # adjust axes if required
  if (!is.na(countmax)){
    p.windrose <- p.windrose +
      ylim(c(0,countmax))
  }

  # print the plot
  # print(p.windrose)

  # return the handle to the wind rose
  return(p.windrose)
}


p1 <- plot.windrose(spd = Meteorological_april$`Wind Speed (m/s)`,dir = Meteorological_april$`Wind Direction`)
p2 <- plot.windrose(spd = Meteorological_aug$`Wind Speed (m/s)`,dir = Meteorological_aug$`Wind Direction`)
p3 <- plot.windrose(spd = Meteorological_dec$`Wind Speed (m/s)`,dir = Meteorological_dec$`Wind Direction`)

p1
p2
p3
# ggpubr::ggarrange(p1, p2, p3, nrow = 3)
```

```{r}
# library(openair)

# windRose(mydata = Meteorological_april, ws = Meteorological_april$`Wind Speed (m/s)`, wd = Meteorological_april$`Wind Direction`)
```

