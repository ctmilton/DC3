"0","# WindRose.R"
"0","require(ggplot2)"
"0","require(RColorBrewer)"
"0",""
"0","plot.windrose <- function(data,"
"0","                      spd,"
"0","                      dir,"
"0","                      spdres = 2,"
"0","                      dirres = 30,"
"0","                      spdmin = 2,"
"0","                      spdmax = 7,"
"0","                      spdseq = NULL,"
"0","                      palette = ""Dark2"","
"0","                      countmax = NA,"
"0","                      debug = 0){"
"0",""
"0",""
"0","# Look to see what data was passed in to the function"
"0","  if (is.numeric(spd) & is.numeric(dir)){"
"0","    # assume that we've been given vectors of the speed and direction vectors"
"0","    data <- data.frame(spd = spd,"
"0","                       dir = dir)"
"0","    spd = ""spd"""
"0","    dir = ""dir"""
"0","  } else if (exists(""data"")){"
"0","  }  "
"0",""
"0","  # Tidy up input data ----"
"0","  n.in <- NROW(data)"
"0","  dnu <- (is.na(data[[spd]]) | is.na(data[[dir]]))"
"0","  data[[spd]][dnu] <- NA"
"0","  data[[dir]][dnu] <- NA"
"0",""
"0","  # figure out the wind speed bins ----"
"0","  if (missing(spdseq)){"
"0","    spdseq <- seq(spdmin,spdmax,spdres)"
"0","  } else {"
"0","    if (debug >0){"
"0","      cat(""Using custom speed bins \n"")"
"0","    }"
"0","  }"
"0","  # get some information about the number of bins, etc."
"0","  n.spd.seq <- length(spdseq)"
"0","  n.colors.in.range <- n.spd.seq - 1"
"0",""
"0","  # create the color map"
"0","  spd.colors <- colorRampPalette(brewer.pal(min(max(3,"
"0","                                                    n.colors.in.range),"
"0","                                                min(9,"
"0","                                                    n.colors.in.range)),                                               "
"0","                                            palette))(n.colors.in.range)"
"0",""
"0","  if (max(data[[spd]],na.rm = TRUE) > spdmax){    "
"0","    spd.breaks <- c(spdseq,"
"0","                    max(data[[spd]],na.rm = TRUE))"
"0","    spd.labels <- c(paste(c(spdseq[1:n.spd.seq-1]),"
"0","                          '-',"
"0","                          c(spdseq[2:n.spd.seq])),"
"0","                    paste(spdmax,"
"0","                          ""-"","
"0","                          max(data[[spd]],na.rm = TRUE)))"
"0","    spd.colors <- c(spd.colors, ""grey50"")"
"0","  } else{"
"0","    spd.breaks <- spdseq"
"0","    spd.labels <- paste(c(spdseq[1:n.spd.seq-1]),"
"0","                        '-',"
"0","                        c(spdseq[2:n.spd.seq]))    "
"0","  }"
"0","  data$spd.binned <- cut(x = data[[spd]],"
"0","                         breaks = spd.breaks,"
"0","                         labels = spd.labels,"
"0","                         ordered_result = TRUE)"
"0","  # clean up the data"
"0","  data. <- na.omit(data)"
"0",""
"0","  # figure out the wind direction bins"
"0","  dir.breaks <- c(-dirres/2,"
"0","                  seq(dirres/2, 360-dirres/2, by = dirres),"
"0","                  360+dirres/2)  "
"0","  dir.labels <- c(paste(360-dirres/2,""-"",dirres/2),"
"0","                  paste(seq(dirres/2, 360-3*dirres/2, by = dirres),"
"0","                        ""-"","
"0","                        seq(3*dirres/2, 360-dirres/2, by = dirres)),"
"0","                  paste(360-dirres/2,""-"",dirres/2))"
"0","  # assign each wind direction to a bin"
"0","  dir.binned <- cut(data[[dir]],"
"0","                    breaks = dir.breaks,"
"0","                    ordered_result = TRUE)"
"0","  levels(dir.binned) <- dir.labels"
"0","  data$dir.binned <- dir.binned"
"0",""
"0","  # Run debug if required ----"
"0","  if (debug>0){    "
"0","    cat(dir.breaks,""\n"")"
"0","    cat(dir.labels,""\n"")"
"0","    cat(levels(dir.binned),""\n"")       "
"0","  }  "
"0",""
"0","  # deal with change in ordering introduced somewhere around version 2.2"
"0","  if(packageVersion(""ggplot2"") > ""2.2""){    "
"0","    # cat(""Hadley broke my code\n"")"
"0","    data$spd.binned = with(data, factor(spd.binned, levels = rev(levels(spd.binned))))"
"0","    spd.colors = rev(spd.colors)"
"0","  }"
"0",""
"0","  # create the plot ----"
"0","  p.windrose <- ggplot(data = data,"
"0","                       aes(x = dir.binned,"
"0","                           fill = spd.binned)) +"
"0","    geom_bar() + "
"0","    scale_x_discrete(drop = FALSE,"
"0","                     labels = waiver()) +"
"0","    coord_polar(start = -((dirres/2)/360) * 2*pi) +"
"0","    scale_fill_manual(name = ""Wind Speed (m/s)"", "
"0","                      values = spd.colors,"
"0","                      drop = FALSE) +"
"0","    theme(axis.title.x = element_blank())"
"0",""
"0","  # adjust axes if required"
"0","  if (!is.na(countmax)){"
"0","    p.windrose <- p.windrose +"
"0","      ylim(c(0,countmax))"
"0","  }"
"0",""
"0","  # print the plot"
"0","  # print(p.windrose)"
"0",""
"0","  # return the handle to the wind rose"
"0","  return(p.windrose)"
"0","}"
"0",""
"0",""
"0","p1 <- plot.windrose(spd = Meteorological_april$`Wind Speed (m/s)`,dir = Meteorological_april$`Wind Direction`)"
"0","p2 <- plot.windrose(spd = Meteorological_aug$`Wind Speed (m/s)`,dir = Meteorological_aug$`Wind Direction`)"
"0","p3 <- plot.windrose(spd = Meteorological_dec$`Wind Speed (m/s)`,dir = Meteorological_dec$`Wind Direction`)"
"0",""
"0","p1"
